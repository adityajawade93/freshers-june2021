create schema company;

set search_path to company;

create table employee(
	fname TEXT NOT NULL,
	mname char null,
	lname text not null,
	ssn char(9) not null primary key,
	Bdate date,
	Address text not null,
	Sex char null,
	Salary decimal(10,2) null,
	super_ssn char(9) null,
	Dno int not null
);

create table department(
	Dname TEXT NOT NULL,
	Dnumber int not null primary key,
	Mgr_ssn char(9) not null,
	Mgr_start_date date null
);

create table dept_locations(
	Dnumber int not null,
	Dlocation text not null,
	primary key(Dnumber, Dlocation)
);

create table project(
	Pname text not null,
	Pnumber int not null,
	Plocation text,
	Dnum int not null,
	primary key(Pnumber),
	unique(Pname)
);

create table works_on(
	Essn char(9) not null,
	Pno int not null,
	Hours decimal(3,1) not null,
	primary key(Essn, Pno)
);

create table dependent(
	Essn char(9) not null,
	Dependent_name text not null,
	Sex char,
	Bdate date,
	Relationship text,
	primary key(Essn, Dependent_name)
);

insert into employee values ('John', 'B', 'Smith', '123456789', '1997-02-12', 'address', 'M', '30000', '333445555', '5')
insert into employee values ('Tohn', 'B', 'Smith', '333445555', '1997-02-12', 'address', 'M', '50000', '123456789', '5');

insert into department values ('nodeJS', '5', '123456789', '1997-02-12');
insert into department values ('java', '4', '333445555', '1997-02-12');

insert into dependent values ('123456789', 'carry', 'F', '1999-02-12', 'sister');
insert into dependent values ('333445555', 'Tom', 'M', '1999-02-12', 'brother');

insert into dept_locations values ('5', 'Banglore');
insert into dept_locations values ('4', 'Hyderabad');

insert into project values ('pr1', '1', 'Banglore', '5');
insert into project values ('pr2', '2', 'Banglore', '4');

insert into works_on values ('123456789', '1', '40');
insert into works_on values ('123456789', '2', '40');

select * from employee;
select * from department;

alter table department add foreign key (mgr_ssn) references employee(ssn);
alter table employee add foreign key (super_ssn) references employee(ssn);
alter table employee add foreign key (Dno) references department(Dnumber);
alter table dept_locations add foreign key (Dnumber) references department(Dnumber);
alter table project add foreign key (Dnum) references department(Dnumber);
alter table works_on add foreign key (Essn) references employee(ssn);
alter table works_on add foreign key (Pno) references project(Pnumber);
alter table dependent add foreign key (Essn) references employee(ssn);

(
	select distinct pnumber 
	from project, department, employee
	where Dnum = Dnumber and mgr_ssn = ssn and lname = 'Smith'
)
union
(
	select distinct pnumber 
	from project, works_on, employee
	where Pnumber = Pno and essn = ssn and lname = 'Smith'
)

select fname, lname
from employee
where exists (select * from dependent where ssn = essn)

select sum(salary), min(salary), max(salary) from employee;

select Dno, count(*) from employee group by Dno;

select ssn, fname, dependent.dependent_name, dependent.relationship
from employee left join dependent on employee.ssn = dependent.essn

select ssn, fname, dependent.dependent_name, dependent.relationship
from employee right join dependent on employee.ssn = dependent.essn

select ssn, fname, dependent.dependent_name, dependent.relationship
from employee inner join dependent on employee.ssn = dependent.essn

select ssn, fname, dependent.dependent_name, dependent.relationship
from employee full join dependent on employee.ssn = dependent.essn

create view works_on1
as select fname, lname, pname
from employee, project, works_on
where ssn = essn and Pno = Pnumber

select * from works_on1

drop view works_on1

create table tbl1(tbl1id int);
create table tbl2(tbl2id int);

create procedure insert_values(x integer, y integer)
language sql
as $$
insert into tbl1 values (x);
insert into tbl2 values (y);
$$;

call insert_values(1,2);

select * from tbl1;
select * from tbl2;

create table audit(empid char(9) not null, entrydate text not null);

create or replace function auditLogFunc() returns trigger as $example_table$
begin
insert into audit(empid, entrydate) values (new.ssn, current_timestamp);
return new;
end;
$example_table$ language plpgsql;

create trigger example_trigger after insert on employee for each row execute procedure auditLogFunc();

insert into employee values ('Aagam', 'N', 'Shah', '111111111', '1997-02-12', 'address', 'M', '66667', '123456789', '5');

select * from audit;

grant select on tbl1 to public;

revoke select on tbl1 from public;

grant insert on employee to public;

revoke insert on employee from public;

insert into tbl1 values (2);
insert into tbl1 values (3);
insert into tbl1 values (4);
insert into tbl1 values (5);
insert into tbl1 values (6);
insert into tbl1 values (7);
insert into tbl1 values (8);

select * from tbl1;

begin;
delete from tbl1 where tbl1id > 5;
rollback;

begin;
delete from tbl1 where tbl1id > 5;
commit;

select * from pg_available_extensions;

create extension if not exists "uuid-ossp";

select uuid_generate_v4();
